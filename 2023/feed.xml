<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2023s on Hexops' devlog</title><link>https://devlog.hexops.com/2023/</link><description>Recent content in 2023s on Hexops' devlog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 12 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://devlog.hexops.com/2023/feed.xml" rel="self" type="application/rss+xml"/><item><title>Mach v0.2 released - Zig game engine &amp; graphics toolkit</title><link>https://devlog.hexops.com/2023/mach-v0.2-released/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://devlog.hexops.com/2023/mach-v0.2-released/</guid><description>&lt;p>Mach is a Zig game engine &amp;amp; graphics toolkit for building high-performance, truly cross-platform, robust &amp;amp; modular games, visualizations, and desktop/mobile GUI apps. &lt;a href="https://machengine.org/">Learn more&lt;/a>&lt;/p>
&lt;p>We&amp;rsquo;ve been developing Mach for ~2 years; this release includes over a year of work, thousands of commits, and fixes &lt;a href="https://github.com/hexops/mach/milestone/2?closed=1">300 issues&lt;/a>.&lt;/p>
&lt;video height="800px" autoplay loop muted>
&lt;source src="https://media.machengine.org/core/example/deferred-rendering.mp4" type="video/mp4">
&lt;/video>
&lt;h2 id="on-your-machine-in-just-60-seconds">On your machine in just ~60 seconds&lt;/h2>
&lt;p>With &lt;a href="https://machengine.org/about/zig-version/">this Zig nightly&lt;/a> version you can run the above demo on your machine in ~60 seconds:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">git clone https://github.com/hexops/mach-core
&lt;span class="nb">cd&lt;/span> mach-core/
zig build run-deferred-rendering
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://machengine.org/about/goals/#zero-fuss-installation">Zero system dependencies&lt;/a> to slow you down; only &lt;a href="https://machengine.org/about/zig-version/">zig&lt;/a> is needed, we build and package the few relevant dependencies on our own. &lt;small>&lt;a href="https://machengine.org/about/known-issues/">known issues&lt;/a>&lt;/small>&lt;/p>
&lt;h2 id="engine-and-core-split">Engine and Core split&lt;/h2>
&lt;p>We completely split &lt;em>Mach engine&lt;/em> and &lt;em>Mach core&lt;/em> apart, so that you get to choose your journey and decide if you just want low-level window+input+GPU and nothing else, or prefer to use our higher level engine (which although not ready for use yet, will be very modular itself):&lt;/p>
&lt;p align="center">
&lt;img class="color-auto" src="https://user-images.githubusercontent.com/3173176/184719710-ebae4fbd-af14-4b2f-80ad-11527c5f3e8f.png" />
&lt;/p>
&lt;h2 id="mach-core">Mach core&lt;/h2>
&lt;picture>
&lt;source media="(prefers-color-scheme: dark)" srcset="https://machengine.org/assets/mach/core-full-dark.svg">
&lt;img alt="mach-core" src="https://machengine.org/assets/mach/core-full-light.svg" style="height: 7rem; margin-top: 1rem;">
&lt;/picture>
&lt;p>Mach core aims to be a &lt;em>truly cross-platform&lt;/em> way to get &lt;em>window+input+GPU, and nothing else.&lt;/em> It supports Linux, Windows, and Mac today, with WebAssembly / browser support in active development, and mobile coming in the future.&lt;/p>
&lt;p>It gives you the power of Vulkan, DirectX, Metal, and modern OpenGL in a &lt;em>single concise graphics API and shader language&lt;/em> - by compiling Google Chrome&amp;rsquo;s WebGPU implementation natively using Zig&amp;rsquo;s build system.&lt;/p>
&lt;p>Seamless multi-threading capabilities are provided, which means that your rendering and input handling are trivially decoupled from one another, you get butter-smooth window resizing, and your render loop and input handling can run at difference frequencies. For example, a 60FPS render loop while your application handles keyboard &amp;amp; mouse events at a much faster dynamic rate (as fast as the OS can deliver them.)&lt;/p>
&lt;div style="align-self: center;">
&lt;video autoplay loop muted height="190px">
&lt;source src="https://media.machengine.org/core/example/gen-texture-light.mp4" type="video/mp4">
&lt;/video>
&lt;video autoplay loop muted height="190px">
&lt;source src="https://media.machengine.org/core/example/boids.mp4" type="video/mp4">
&lt;/video>
&lt;video autoplay loop muted height="190px">
&lt;source src="https://media.machengine.org/core/example/textured-cube.mp4" type="video/mp4">
&lt;/video>
&lt;/div>
&lt;p>You can think of Mach core as an alternative to the classic options of SDL, GLFW+OpenGL, etc.&lt;/p>
&lt;p>There are &lt;a href="https://machengine.org/core/examples/">15+ examples in the showcase&lt;/a>, and we&amp;rsquo;re &lt;a href="https://github.com/hexops/mach/issues/858">planning a C API&lt;/a> so it can be used from other languages as well.&lt;/p>
&lt;h2 id="engine-development-has-begun">Engine development has begun&lt;/h2>
&lt;p>&lt;strong>Mach engine is not ready for use yet, but we&amp;rsquo;ve started breaking ground on higher-level engine APIs.&lt;/strong>&lt;/p>
&lt;p>The v0.2 release focuses on deep changes and improvements to our infrastructure, primarily building out the Zig gamedev ecosystem and building foundational packages that we needed for Mach core, the engine, and a game we&amp;rsquo;re starting to build.&lt;/p>
&lt;p>As a result, we&amp;rsquo;ve &lt;em>finally&lt;/em> just broken ground on the engine side of things.&lt;/p>
&lt;img src="https://devlog.hexops.com/img/2023/mach-where-we-are.png">
&lt;h2 id="breaking-up-our-monorepo">Breaking up our monorepo&lt;/h2>
&lt;p>Previously, all of Mach&amp;rsquo;s &lt;a href="https://machengine.org/pkg/">standalone packages&lt;/a> were developed in a single giant monorepo. This was both intimidating for new contributors, and we wanted to better communicate how many standalone Zig gamedev packages we actually provide.&lt;/p>
&lt;p>Today, we&amp;rsquo;re happy to report all standalone packages are now developed in separate repositories and available via the package manager!&lt;/p>
&lt;h2 id="zig-package-manager">Zig package manager&lt;/h2>
&lt;p>We migrated 100% to the self-hosted Zig compiler and the new experimental Zig package manager, every Git submodule has been banished!&lt;/p>
&lt;p>We created &lt;a href="https://pkg.machengine.org/">pkg.machengine.org&lt;/a> - a mirror for downloading Mach packages and Zig downloads as well.&lt;/p>
&lt;h2 id="introducing-wrench-the-machanist">Introducing Wrench the Machanist&lt;/h2>
&lt;img src="https://raw.githubusercontent.com/hexops/media/b71e82ae9ea20c22a2eb3ab95d8ba48684635620/mach/wrench_rocket.svg" style="width: 300px">
&lt;p>Wrench is the Mach engine mascot (artwork contributed by &lt;a href="https://keylajones.me">Keyla Jones&lt;/a>); and also &lt;a href="https://wrench.machengine.org/">our infrastructure automation&lt;/a> tool, written in Go, to help us with various tasks:&lt;/p>
&lt;p>Giving us an overview of our many repositories &lt;a href="https://wrench.machengine.org/projects/">CI statuses&lt;/a> and &lt;a href="https://wrench.machengine.org/pull-requests/">pull requests&lt;/a>:&lt;/p>
&lt;p>&lt;a href="https://github.com/hexops/mach/assets/3173176/62c3e118-faa0-40c7-a663-e9e68e000bbf">&lt;img src="https://github.com/hexops/mach/assets/3173176/62c3e118-faa0-40c7-a663-e9e68e000bbf" style="width: 300px">&lt;/a>&lt;a href="https://user-images.githubusercontent.com/3173176/210106853-3e72f102-e8a8-4154-bec3-e169922fd9af.png">&lt;img src="https://user-images.githubusercontent.com/3173176/210106853-3e72f102-e8a8-4154-bec3-e169922fd9af.png" style="width: 300px">&lt;/a>&lt;/p>
&lt;p>Sending us &lt;a href="https://github.com/hexops/mach/pull/953">pull requests&lt;/a> to automatically update our CI pipelines to the latest Zig version, and update our &lt;a href="https://github.com/hexops/mach/pull/926">&lt;code>build.zig.zon&lt;/code>&lt;/a> dependencies - in a fully atomic way across all our repositories at once:&lt;/p>
&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/210106831-afe34f1e-38fc-40ab-bee3-72374067838c.png">&lt;img src="https://user-images.githubusercontent.com/3173176/210106831-afe34f1e-38fc-40ab-bee3-72374067838c.png" style="width: 300px">&lt;/a>&lt;/p>
&lt;p>&amp;hellip;and much more:&lt;/p>
&lt;ul>
&lt;li>Checking our website and docs for &lt;a href="https://github.com/hexops/mach/issues/931">broken links&lt;/a> and sending us GitHub issues.&lt;/li>
&lt;li>Performing automatic updates of involved dependencies, such as updating our fork of Google Chrome&amp;rsquo;s WebGPU implementation, which involves &lt;a href="https://github.com/hexops/mach-gpu-dawn/pull/22">pull requests&lt;/a> across a few different repositories, pushing branches, running out-of-band commands, and ultimately presenting us with helpful/pretty diffs so we can just do the human work.&lt;/li>
&lt;li>A custom CI job runner system, running on a custom mini server with actual GPUs - so we can do screenshot-based testing of graphical applications in the future.&lt;/li>
&lt;/ul>
&lt;video height="800px" controls>
&lt;source src="https://user-images.githubusercontent.com/3173176/234467605-ed255a5f-325e-449b-934b-971c2d4b4739.mp4" type="video/mp4">
&lt;/video>
&lt;video height="800px" controls>
&lt;source src="https://user-images.githubusercontent.com/3173176/210107110-3ac1df91-1192-4113-96cd-748ae581c4f9.mp4" type="video/mp4">
&lt;/video>
&lt;h2 id="mach-gpu-rewritten-for-perfection">mach-gpu: rewritten for perfection&lt;/h2>
&lt;picture>
&lt;source srcset="https://raw.githubusercontent.com/hexops/media/839b04fa5a72428052733d2095726894ff93466a/gpu/logo_dark.svg" media="(prefers-color-scheme: dark)">
&lt;img style="height: 100px;" src="https://raw.githubusercontent.com/hexops/media/839b04fa5a72428052733d2095726894ff93466a/gpu/logo_light.svg">
&lt;/picture>
&lt;p>&lt;a href="https://machengine.org/pkg/mach-gpu/">mach-gpu&lt;/a> is the WebGPU interface for Zig, and last year we &lt;a href="../2022/perfecting-webgpu-native/">completely rewrote&lt;/a> it, achieving:&lt;/p>
&lt;ul>
&lt;li>Zero overheard, using comptime interfaces&lt;/li>
&lt;li>100% API coverage&lt;/li>
&lt;li>Default values for 100% of the API (which makes writing descriptors, and makes examples, look much simpler.)&lt;/li>
&lt;/ul>
&lt;h2 id="audio-development">Audio development&lt;/h2>
&lt;p>Contributor &lt;a href="https://github.com/alichraghi">@alichraghi&lt;/a> has been relentless in pushing our audio capabilities (and more) forward&lt;/p>
&lt;div style="align-self: center">
&lt;picture>
&lt;source media="(prefers-color-scheme: dark)" srcset="https://machengine.org/assets/mach/flac-full-dark.svg">
&lt;img alt="mach-flac" src="https://machengine.org/assets/mach/flac-full-light.svg" style="width: 250px">
&lt;/picture>
&lt;picture>
&lt;source media="(prefers-color-scheme: dark)" srcset="https://machengine.org/assets/mach/sysaudio-full-dark.svg">
&lt;img alt="mach-sysaudio" src="https://machengine.org/assets/mach/sysaudio-full-light.svg" style="width: 250px">
&lt;/picture>
&lt;picture>
&lt;source media="(prefers-color-scheme: dark)" srcset="https://machengine.org/assets/mach/opus-full-dark.svg">
&lt;img alt="mach-opus" src="https://machengine.org/assets/mach/opus-full-light.svg" style="width: 250px">
&lt;/picture>
&lt;/div>
&lt;p>&lt;a href="https://machengine.org/pkg/mach-sysaudio/">mach-sysaudio&lt;/a> started as Zig bindings to Andrew Kelley&amp;rsquo;s awesome &lt;a href="https://github.com/andrewrk/libsoundio">libsoundio&lt;/a> library, and ended up being a fully-fledged new library written in Zig to achieve similar goals:&lt;/p>
&lt;ul>
&lt;li>Truly cross-platform, low-level, audio IO in Zig - playback and recording with backends for:
&lt;ul>
&lt;li>Linux
&lt;ul>
&lt;li>PulseAudio&lt;/li>
&lt;li>PipeWire&lt;/li>
&lt;li>Jack&lt;/li>
&lt;li>ALSA&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Windows: WASAPI&lt;/li>
&lt;li>macOS/iOS: CoreAudio&lt;/li>
&lt;li>WebAssembly: WebAudio&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Then just recently we got &lt;a href="https://machengine.org/pkg/mach-flac/">mach-flac&lt;/a> and &lt;a href="https://machengine.org/pkg/mach-opus/">mach-opus&lt;/a>, which combined give you FLAC (lossless audio) and Opus (lossy audio) via the respective battle-hardeneed xiph.org libraries.&lt;/p>
&lt;h2 id="new-website">New website&lt;/h2>
&lt;img src="https://github.com/hexops/mach/assets/3173176/6a1167bd-330c-47b4-8d8b-69e0c5cd0de2">
&lt;p>We built a &lt;a href="https://machengine.org">brand new website&lt;/a> that will serve us well into the future, featuring:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://machengine.org/engine/roadmap/">Project roadmap&lt;/a>&lt;/li>
&lt;li>Documentation for Engine, Core, Packages, and more.&lt;/li>
&lt;li>WebGPU documentation and &lt;a href="https://machengine.org/engine/gpu/">learning material&lt;/a>&lt;/li>
&lt;li>Offline-viewing support (see link in the footer)&lt;/li>
&lt;li>All around better design, landing page, etc.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> Mobile support isn&amp;rsquo;t great right now, we&amp;rsquo;ll fix it later.&lt;/p>
&lt;h2 id="browser-support-in-development">Browser support: in development&lt;/h2>
&lt;p>Chrome has already shipped WebGPU, and others will follow soon. Mach support for WebAssembly is not yet ready, but is coming along nicely:&lt;/p>
&lt;ul>
&lt;li>Input, audio, etc. is working already (&lt;a href="https://slimsag.com/mach/piano/">piano demo&lt;/a>, click in the frame and type with your A-Z keys.)&lt;/li>
&lt;li>&lt;code>mach build&lt;/code> is a new CLI command written in Zig which:
&lt;ul>
&lt;li>Starts an HTTP development server&lt;/li>
&lt;li>Invokes &lt;code>zig build&lt;/code> for you when you reload the page&lt;/li>
&lt;li>Generally provides a nice browser development experience&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>We currently do not have graphics support in the browser: we are currently doing a full rewrite of &lt;a href="https://machengine.org/pkg/mach-sysjs/">mach-sysjs&lt;/a> to use a code generation approach to enable Zig and JavaScript to communicate across the WebAssembly boundary, while being able to pass complex types (strings, slices, etc.) instead of just pointers and integers as normal. Once this rewrite is finished, we will generate a &lt;code>gpu.Interface&lt;/code> implementation which simply invokes the browser&amp;rsquo;s JavaScript WebGPU API with minimal overhead.&lt;/p>
&lt;h2 id="dusk-experimental-pure-zig-webgpu-implementation">Dusk: Experimental pure-Zig WebGPU implementation&lt;/h2>
&lt;picture>
&lt;source media="(prefers-color-scheme: dark)" srcset="https://machengine.org/assets/mach/dusk-full-dark.svg">
&lt;img alt="mach-dusk" src="https://machengine.org/assets/mach/dusk-full-light.svg" style="height: 7rem; margin-top: 1rem;">
&lt;/picture>
&lt;p>Dusk is a highly experimental WebGPU implementation in Zig, aiming to be blazingly fast, lean &amp;amp; mean.&lt;/p>
&lt;p>&lt;a href="https://github.com/alichraghi">@alichraghi&lt;/a> has been quietly working on Dusk tirelessly and consistently over the past year, and we think it may begin to be usable in Mach v0.3. Although it is not usable today, it already features:&lt;/p>
&lt;ul>
&lt;li>A &lt;a href="https://github.com/hexops/mach-dusk/tree/main/src/shader">full WGSL shader parser and compiler&lt;/a>, based loosely on the Zig compiler, capable of emitting SPIRV.&lt;/li>
&lt;li>A partial Vulkan implementation.&lt;/li>
&lt;/ul>
&lt;p>Dusk is a long-term bet / investment for us, we intend to always have the option of using Dawn (the Google Chrome WebGPU implementation), and we don&amp;rsquo;t expect Dusk will be the default very soon. Since both will implement the same &lt;code>gpu.Interface&lt;/code>, it&amp;rsquo;ll just be another backend you can select from at build time.&lt;/p>
&lt;p>Learn more about our goals with Dusk &lt;a href="https://machengine.org/pkg/mach-dusk/#goals">here&lt;/a>, and feel free to join the &lt;code>#dusk&lt;/code> channel in Discord or check out the repository if you&amp;rsquo;re interested in contributing some Vulkan, Metal, or Direct3D knowledge.&lt;/p>
&lt;h2 id="model-loading">Model loading&lt;/h2>
&lt;p>&lt;a href="https://machengine.org/pkg/mach-model3d/">mach-model3d&lt;/a> provides Zig bindings to &lt;a href="https://gitlab.com/bztsrc/model3d/">Model3D&lt;/a>, a compact, featureful model format &amp;amp; alternative to glTF. We may replace this with our own model format in the future, but for now this enables us to load models from Blender in a decent, performant way.&lt;/p>
&lt;video height="800px" autoplay loop muted>
&lt;source src="https://media.machengine.org/core/example/pbr-basic.mp4" type="video/mp4">
&lt;/video>
&lt;h2 id="sprite--2d-examples">Sprite / 2D examples&lt;/h2>
&lt;img src="https://media.machengine.org/core/example/sprite2d.jpg">
&lt;p>mach-core now has a &lt;a href="https://github.com/hexops/mach-core/tree/main/examples/sprite2d">sprite2d example&lt;/a> which is ~400 lines and demonstrates loading sprites from a JSON file and sprite atlas, basic keyboard movement, etc.&lt;/p>
&lt;p>We&amp;rsquo;ve already begun making a higher-level API for 2D graphics, as well - though not ready for use yet.&lt;/p>
&lt;h2 id="community">Community&lt;/h2>
&lt;ul>
&lt;li>Our &lt;a href="https://machengine.org/discord">Discord community&lt;/a> grew to over 700+ members, though we aim to keep all valuable information in GitHub issues and on the new website.&lt;/li>
&lt;li>We attended &lt;a href="https://softwareyoucan.love/">Software You Can Love&lt;/a> in Milan, Italy - gave a talk, had a table full of Zig gamedevs, and gave out some cool stickers&lt;/li>
&lt;li>We saw a number of new contributors, both one-off and ongoing.&lt;/li>
&lt;li>Many coffee was drank, and much coding was done over the holidays.&lt;/li>
&lt;/ul>
&lt;div style="align-self: center;">
&lt;img src="https://github.com/hexops/mach/assets/3173176/43573ecf-35ce-4e34-831f-425151d5c281" style="height: 190px">
&lt;img src="https://github.com/hexops/mach/assets/3173176/ad30a37d-a37c-4950-b7b6-36411c9a51f1" style="height: 190px">
&lt;img src="https://github.com/hexops/mach/assets/3173176/9cfe64fe-ba2e-49a1-bfbe-f40b66abde2b" style="height: 190px">
&lt;/div>
&lt;h2 id="a-personal-note">A personal note&lt;/h2>
&lt;div style="display: flex;">
&lt;a href="https://github.com/slimsag">
&lt;img style="width: 420px" src="https://machengine.org/img/slimsag-profile.png">
&lt;/a>
&lt;div>
&lt;p>I work a normal tech job, and every day after I sign off from work I go online to build Mach, almost like working two jobs. I've been working on Mach double-time like this for over two years now, and dreaming of it for a decade before that.&lt;/p>
&lt;p>FOSS &lt;a href="https://devlog.hexops.com/2021/increasing-my-contribution-to-zig-to-200-a-month#i-grew-up-playing-linux-games-like-mania-drive">is in my roots&lt;/a> and I believe we should own our tools, they should empower &lt;em>us&lt;/em>-not be part of &lt;a href="https://kristoff.it/blog/the-open-source-game/">the 'open source' game&lt;/a> which is all too prevelant today (even among 'open source' engines.) Mach &lt;em>needs&lt;/em> to be for people like you and me-it needs to genuinely be &lt;a href="https://softwareyoucan.love">software you can love&lt;/a>.&lt;/p>
&lt;p>My dream is one day to live a simple, modest, future earning a living building Mach for you and creating high-quality games for everyone. Please consider &lt;a href="https://github.com/sponsors/slimsag">sponsoring my work&lt;/a> if you believe in my vision.&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="thanks">Thanks&lt;/h2>
&lt;p>Both to everyone who has contributed and sponsored the project, as well as you for reading this far!&lt;/p>
&lt;div style="display: flex; flex-direction: row; align-items: center;">
&lt;img align="left" style="max-height: 12.5rem;" src="https://user-images.githubusercontent.com/3173176/187348488-0b52e87d-3a48-421c-9402-be78e32b5a20.png">&lt;/img>
&lt;ul>
&lt;li>Join the &lt;a href="https://discord.gg/XNG3NZgCqp">Mach Discord server&lt;/a>&lt;/li>
&lt;li>Checkout &lt;a href="https://machengine.org">machengine.org&lt;/a>&lt;/li>
&lt;li>Consider &lt;a href="https://github.com/sponsors/slimsag">sponsoring development&lt;/a> so we can do more of it!&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Mach: providing an ecosystem of C libraries using the Zig package manager</title><link>https://devlog.hexops.com/2023/mach-ecosystem-c-libraries/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://devlog.hexops.com/2023/mach-ecosystem-c-libraries/</guid><description>&lt;p>&lt;a href="https://github.com/andrewrk">Andrew Kelley&lt;/a> gave a keynote speech at &lt;a href="https://softwareyoucanlove.ca">Software You Can Love 2023&lt;/a> in Vancouver last week (a recording will be available later), the outline was:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>How to Build Software From Source&lt;/strong>&lt;/p>
&lt;p>[&amp;hellip;] then I&amp;rsquo;ll take things in a completely different direction, by &lt;strong>showing you how to rip apart a project&amp;rsquo;s build system and replace it with the zig build system.&lt;/strong> This will make building things from source work effortlessly for more people and more platforms, as well as annoy a lot of boomers. It&amp;rsquo;s going to be super fun and spicy!&lt;/p>
&lt;/blockquote>
&lt;h2 id="as-we-all-know-zig-is-a-cc-compiler-and-its-own-build-system">As we all know, Zig is a C/C++ compiler and its own build system&lt;/h2>
&lt;p>Zig is really three things:&lt;/p>
&lt;ul>
&lt;li>Programming language&lt;/li>
&lt;li>Build system (build.zig) replacing makefiles/cmake/ninja/etc&lt;/li>
&lt;li>C/C++ compiler with an emphasis on cross-compilation&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ve been leveraging all three in &lt;a href="https://github.com/hexops/mach">Mach engine&lt;/a> for a while now. For example, we maintain a version of Google Chrome&amp;rsquo;s WebGPU implementation (Dawn) with its rather complex build system (code generation, python scripts, depot_tools, ninja, cmake, depot_tools, etc.) replaced with &lt;code>build.zig&lt;/code>.&lt;/p>
&lt;p>That let&amp;rsquo;s us say that if you have &lt;a href="https://github.com/hexops/mach#supported-zig-version">a recent Zig version&lt;/a> you can get started with Mach in ~60s on Windows, Mac, and Linux:&lt;/p>
&lt;pre>&lt;code>git clone --recursive https://github.com/hexops/mach-examples
cd mach-examples/
zig build run-textured-cube
&lt;/code>&lt;/pre>&lt;p>And instead of getting a bunch of dependency errors that you might need to &lt;code>apt-get&lt;/code> install or whatever, you&amp;rsquo;ll just get something that works out of the box:&lt;/p>
&lt;video autoplay loop muted playsinline style="width:24rem">
&lt;source src="https://user-images.githubusercontent.com/3173176/210317154-90e7a41c-2b44-4ee6-956f-5a93285e19ef.webm" type="video/webm">&lt;/video>
&lt;h2 id="zig-has-a-new-package-manager-for-cc-too">Zig has a new package manager (for C/C++ too!)&lt;/h2>
&lt;p>Those in the Zig community know that Zig has a new package manager, it&amp;rsquo;s built into the compiler. Effectively you describe your dependencies in a &lt;code>build.zig.zon&lt;/code> file, and then the &lt;code>zig&lt;/code> compiler is able to fetch them for you as part of &lt;code>zig build&lt;/code>. You&amp;rsquo;re then able to link against/use dependencies in your &lt;code>build.zig&lt;/code> file, which declaratively says how to build your project (except, using a real language instead of a DSL like cmake/etc use.)&lt;/p>
&lt;p>It&amp;rsquo;s still very experimental, &lt;a href="https://github.com/ziglang/zig/pull/14265">has little to no documentation yet&lt;/a> - it&amp;rsquo;s not ready for widespread use. But one strong point is that it also aims to address the issue of building C/C++ projects, not just Zig ones. You can write a &lt;code>build.zig&lt;/code> file in Zig, describing how to build your C/C++ project using Zig as the toolchain. Then for free you get quite solid cross-compilation (since Zig bundles clang, every glibc version, and more), plus now a dependency manager, as well as a declarative way to describe your build using the Zig language.&lt;/p>
&lt;p>One example of this is in Andrew Kelley&amp;rsquo;s &lt;a href="https://github.com/andrewrk/ffmpeg/">fork of ffmpeg&lt;/a>, where he merely forked the ffmpeg repository, removed their build system &amp;amp; unnecessary files, and added &lt;a href="https://github.com/andrewrk/ffmpeg/blob/main/build.zig">a &lt;code>build.zig&lt;/code> file&lt;/a>. This allows you to clone the repository and &lt;code>zig build&lt;/code> will fetch all the required dependencies and build ffmpeg for you. Fancy!&lt;/p>
&lt;h2 id="mach-engine">Mach engine&lt;/h2>
&lt;p>&lt;a href="https://github.com/hexops/mach">Mach engine&lt;/a> is an upcoming game engine built in Zig, that we&amp;rsquo;re building with the aim of becoming competitive with Unity/Unreal/Godot - but with an emphasis on &lt;em>modularity&lt;/em>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Mach core&lt;/strong>: If you choose to use &lt;em>core&lt;/em>, then it&amp;rsquo;s like an alternative to GLFW+OpenGL or SDL, you just get a window+input+WebGPU with minimal dependencies. Your application runs natively on Windows/Linux/Mac using their respective graphics APIs (DirectX12, Vulkan, Metal), you get cross-compilation and zero-fuss installation, and also web/mobile support in the future with the same codebase. Write once, run everywhere.&lt;/li>
&lt;li>&lt;strong>Mach engine&lt;/strong>: If you choose this option, you &lt;em>additionally&lt;/em> get an entity component system - with a library of standard modules that you can &amp;lsquo;plug and play&amp;rsquo; with for rendering/audio/etc.&lt;/li>
&lt;/ul>
&lt;h3 id="keeping-our-runtime-c-dependencies-small">Keeping our runtime C dependencies small&lt;/h3>
&lt;p>One way that we&amp;rsquo;re keeping &lt;em>runtime C dependencies&lt;/em> (the ones your game/app would ship with!) a smaller, focused, set - is by building tooling: a &lt;code>mach&lt;/code> CLI and fully-fledged GUI editor like other engines have. But how does that help reduce runtime dependencies? Well, at runtime you may need:&lt;/p>
&lt;ul>
&lt;li>Harfbuzz: for Unicode text layout&lt;/li>
&lt;li>GLFW (and some headers): for window management)&lt;/li>
&lt;li>Basisu and PNG: for GPU supercompressed textures / lossless textures&lt;/li>
&lt;li>Opus and FLAC: for lossy and lossless audio&lt;/li>
&lt;/ul>
&lt;p>Mach will &amp;lsquo;bless&amp;rsquo; certain formats, being opinionated in what you &lt;em>ship&lt;/em> with your game. You&amp;rsquo;re free to pull in other formats, if you like, but the default/easy path will be these ones. As a result, there&amp;rsquo;s a lot we &lt;em>won&amp;rsquo;t&lt;/em> need at runtime:&lt;/p>
&lt;ul>
&lt;li>Freetype&lt;/li>
&lt;li>JPEG, TGA, or other image formats&lt;/li>
&lt;li>MP3, ffmpeg, or other audio formats&lt;/li>
&lt;/ul>
&lt;p>We don&amp;rsquo;t need these because our &lt;em>tooling&lt;/em> (the CLI and GUI editor) is going to make it easy to convert whatever format you want into the &amp;lsquo;blessed&amp;rsquo; runtime formats. One major benefit of this is that we can nudge you to the right defaults, without you being an expert. For example, you probably want to be using texture compression formats that GPU hardware itself understands, instead of say shipping a JPEG that just gets expanded to an uncompressed texture, eating a bunch of GPU memory and harming your texture bandwidth.&lt;/p>
&lt;h2 id="providing-an-ecosystem-of-c-libraries">Providing an ecosystem of C libraries&lt;/h2>
&lt;p>Similar to Andrew Kelley&amp;rsquo;s ffmpeg fork (although, with a few niceties to verify the supply chain) - Mach is now maintaining forks of various C libraries that we make use of. These aren&amp;rsquo;t Zig bindings to these libraries (which we have separately), but rather are just forks of the actual project with their build system replaced by &lt;code>build.zig&lt;/code>.&lt;/p>
&lt;p>A massive special thanks to &lt;a href="https://mzte.de/git/">@LordMZTE&lt;/a> who has been tirelessly pushing us along here over the past month-ish, helping to inch us ever-closer to fully adopting the new package manager.&lt;/p>
&lt;h3 id="forks-we-maintain">Forks we maintain&lt;/h3>
&lt;p>We have &lt;em>forks&lt;/em> of these projects which switch their build systems to &lt;code>build.zig&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/hexops/harfbuzz">hexops/harfbuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hexops/freetype">hexops/freetype&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hexops/brotli">hexops/brotli&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hexops/glfw">hexops/glfw&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hexops/basisu">hexops/basisu&lt;/a> (basis_universal, supercompressed textures)&lt;/li>
&lt;/ul>
&lt;h3 id="a-note-about-supply-chain-verification">A note about supply chain verification&lt;/h3>
&lt;p>I personally care a lot about supply chain security - and more importantly, bugs. In general, I don&amp;rsquo;t ever want anyone to have to &amp;lsquo;wonder&amp;rsquo; if our fork of a library has some strange patches applied to it or something.&lt;/p>
&lt;p>As a result, in each of these forks we&amp;rsquo;ve taken the time to ensure &lt;em>you&lt;/em> know the exact &lt;code>git diff&lt;/code> command you can run to verify that our fork &lt;em>exactly&lt;/em> matches the upstream version - with the only difference being &lt;em>removing the project&amp;rsquo;s old build system, and unnecessary files&lt;/em>.&lt;/p>
&lt;h3 id="header-packages-were-maintaining">Header packages we&amp;rsquo;re maintaining&lt;/h3>
&lt;p>In addition to the above, we&amp;rsquo;re maintaining the following which aren&amp;rsquo;t strict forks (a repository for each would simply be too much for us to maintain), but rather are collections of common headers that you very often need together. These can help you build GLFW, SDL, and other such applications.&lt;/p>
&lt;p>Some headers are generated with platform-specific tools (e.g. in the case of Wayland this is needed.) We always provide the exact steps we used to produce the headers from upstream repositories in an &lt;code>update-upstream.sh&lt;/code> script, with the intent that you can fully reproduce what&amp;rsquo;s in these packages and have confidence it came from the upstream repository.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/hexops/vulkan-headers">hexops/vulkan-headers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hexops/linux-audio-headers">hexops/linux-audio-headers&lt;/a> includes:
&lt;ul>
&lt;li>ALSA&lt;/li>
&lt;li>Jack&lt;/li>
&lt;li>PipeWire&lt;/li>
&lt;li>PulseAudio&lt;/li>
&lt;li>SPA&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/hexops/x11-headers">hexops/x11-headers&lt;/a> includes:
&lt;ul>
&lt;li>x11&lt;/li>
&lt;li>xcb&lt;/li>
&lt;li>xkbcommon&lt;/li>
&lt;li>xcursor&lt;/li>
&lt;li>xrandr&lt;/li>
&lt;li>xfixes&lt;/li>
&lt;li>xrender&lt;/li>
&lt;li>xinerama&lt;/li>
&lt;li>xi&lt;/li>
&lt;li>xext&lt;/li>
&lt;li>xorgproto&lt;/li>
&lt;li>GLX&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/hexops/wayland-headers">hexops/wayland-headers&lt;/a> includes:
&lt;ul>
&lt;li>xdg-shell&lt;/li>
&lt;li>xdg-decoration&lt;/li>
&lt;li>viewporter&lt;/li>
&lt;li>pointer-constraints-unstable-v1&lt;/li>
&lt;li>relative-pointer-unstable-v1&lt;/li>
&lt;li>idle-inhibit-unstable-v1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="how-do-i-use-these">How do I use these?&lt;/h3>
&lt;p>Later we&amp;rsquo;ll provide more details specifically on how to use these. Effectively you just add them to a &lt;code>build.zig.zon&lt;/code> file next to your &lt;code>build.zig&lt;/code> and then call &lt;code>b.dependency(&amp;quot;name&amp;quot;)&lt;/code> to retrieve each one. If you need more help than that, you might need to &lt;a href="https://discord.gg/XNG3NZgCqp">join our Discord&lt;/a> because as mentioned previously the Zig package manager is pretty immature and has sharp edges today. There are &lt;a href="https://github.com/hexops/mach/issues/721">lots of known issues &amp;amp; bugs&lt;/a> that prevent even us from using it fully today.&lt;/p>
&lt;p>But, it is coming along rather quickly! We wanted to let the broader Zig community know we&amp;rsquo;re maintaining these packages to help with collaboration.&lt;/p>
&lt;h2 id="help-us-become-sustainable">Help us become sustainable&lt;/h2>
&lt;p>We&amp;rsquo;re working towards Mach v0.2, this article was one of the first steps in beginning to share the progress we&amp;rsquo;ve been making towards that behind the scenes over the past several months. We have some exciting things to share next, this was the &amp;lsquo;boring&amp;rsquo; article that had to go first. :)&lt;/p>
&lt;p>&lt;img align="left" style="max-height: 150px;" src="https://user-images.githubusercontent.com/3173176/187348488-0b52e87d-3a48-421c-9402-be78e32b5a20.png">&lt;/img>
&lt;br>&lt;br>
Consider &lt;a href="https://github.com/sponsors/slimsag">sponsoring my work&lt;/a> to help us become a sustainable OSS project and enable us to do more in the future.
&lt;br>&lt;br>
Join the &lt;a href="https://discord.gg/XNG3NZgCqp">Mach Discord&lt;/a> where we&amp;rsquo;re building the future of Zig game development in realtime!&lt;/p></description></item><item><title>Zig tips: v0.11 std.build API / package manager changes</title><link>https://devlog.hexops.com/2023/zig-0-11-breaking-build-changes/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><guid>https://devlog.hexops.com/2023/zig-0-11-breaking-build-changes/</guid><description>&lt;p>We&amp;rsquo;ve just updated &lt;a href="https://machengine.org/">Mach engine&lt;/a> to use the latest Zig nightly version, which includes a fair amount of improvements and breaking changes to the &lt;code>std.build&lt;/code> API used in &lt;code>build.zig&lt;/code> files, and figured now would be a good time to share the general changes you may need to make if you want to update your own code.&lt;/p>
&lt;h2 id="package-manager-incoming">Package manager: incoming!&lt;/h2>
&lt;p>Zig is finally starting to see its package manager and build system shape up, some notable mentions:&lt;/p>
&lt;ul>
&lt;li>&lt;code>std.http.Client&lt;/code> and &lt;code>std.crypto.tls&lt;/code> were added (&lt;a href="https://github.com/ziglang/zig/pull/13980">#13980&lt;/a>)&lt;/li>
&lt;li>The package manager MVP landed almost a month ago and has seen steady improvements since (&lt;a href="https://github.com/ziglang/zig/pull/14265">#14265&lt;/a>)&lt;/li>
&lt;li>Zig packages can now expose C headers are part of their public API (&lt;a href="https://github.com/ziglang/zig/pull/14449">#14449&lt;/a>)&lt;/li>
&lt;li>Transitive dependencies are now handled better (&lt;a href="https://github.com/ziglang/zig/pull/14392">#14392&lt;/a>)&lt;/li>
&lt;li>&amp;ldquo;zig build: The breakings will continue until morale improves.&amp;rdquo; (&lt;a href="https://github.com/ziglang/zig/pull/14498">#14498&lt;/a>)&lt;/li>
&lt;li>Zig Object Notation (ZON, an alternative to JSON) was introduced (&lt;a href="https://github.com/ziglang/zig/pull/14523">#14523&lt;/a>)&lt;/li>
&lt;li>The caching system is being moved from the compiler to the std lib to start using it in the bulid system (&lt;a href="https://github.com/ziglang/zig/pull/14571">#14571&lt;/a>)&lt;/li>
&lt;li>Zig plans to run the build system in a sandboxed WASM environment (&lt;a href="https://github.com/ziglang/zig/issues/14286">#14286&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>You can get an overview of progress on the package manager on this &lt;a href="https://github.com/ziglang/zig/projects/4">GitHub project board&lt;/a>&lt;/p>
&lt;p>Mach isn&amp;rsquo;t yet using the new package manager: it&amp;rsquo;s improving rapidly, and we plan to make use of it soon, but things are still changing so we&amp;rsquo;ve held off for now. What we have done, though, is updated to the latest API and want to share those changes with you.&lt;/p>
&lt;h2 id="release-options-have-been-renamed-to-optimization">Release options have been renamed to optimization&lt;/h2>
&lt;p>Previously you would&amp;rsquo;ve used &lt;code>b.standardReleaseOptions()&lt;/code> which would provide your &lt;code>zig build&lt;/code> command with multiple options like &lt;code>zig build -Drelease-fast=true&lt;/code>, &lt;code>zig build -Drelease-safe=true&lt;/code>, etc.&lt;/p>
&lt;p>It&amp;rsquo;s been renamed to &lt;code>b.standardOptimizeOption(.{})&lt;/code> and now exposes a single build option &lt;code>zig build -Doptimize=ReleaseFast&lt;/code>, &lt;code>zig build -Doptimize=ReleaseSafe&lt;/code>, etc. instead.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="gd">-pub fn build(b: *std.build.Builder) void {
&lt;/span>&lt;span class="gd">- const mode = b.standardReleaseOptions();
&lt;/span>&lt;span class="gd">- const target = b.standardTargetOptions(.{});
&lt;/span>&lt;span class="gd">&lt;/span>&lt;span class="gi">+pub fn build(b: *std.Build) void {
&lt;/span>&lt;span class="gi">+ const optimize = b.standardOptimizeOption(.{});
&lt;/span>&lt;span class="gi">+ const target = b.standardTargetOptions(.{});
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="gd">-mode: std.builtin.Mode
&lt;/span>&lt;span class="gd">&lt;/span>&lt;span class="gi">+optimize: std.builtin.OptimizeMode
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="gd">-step.build_mode
&lt;/span>&lt;span class="gd">&lt;/span>&lt;span class="gi">+step.optimize
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="creating-tests-libraries-and-executables">Creating tests, libraries, and executables&lt;/h2>
&lt;p>Creating tests, libraries, and executables now takes a struct with options as the parameter instead of using a setter API:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="gd">-const exe = b.addExecutable(&amp;#34;example&amp;#34;, &amp;#34;src/main.zig&amp;#34;);
&lt;/span>&lt;span class="gd">-exe.setBuildMode(mode);
&lt;/span>&lt;span class="gd">-exe.setTarget(target);
&lt;/span>&lt;span class="gd">&lt;/span>&lt;span class="gi">+const exe = b.addExecutable(.{
&lt;/span>&lt;span class="gi">+ .name = &amp;#34;example&amp;#34;,
&lt;/span>&lt;span class="gi">+ .root_source_file = &amp;#34;src/main.zig&amp;#34;,
&lt;/span>&lt;span class="gi">+ .target = target,
&lt;/span>&lt;span class="gi">+ .optimize = optimize,
&lt;/span>&lt;span class="gi">+});
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;details>
&lt;summary>See more examples&lt;/summary>
&lt;p>Tests:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="gd">-const main_tests = b.addTestExe(&amp;#34;glfw-tests&amp;#34;, sdkPath(&amp;#34;/src/main.zig&amp;#34;));
&lt;/span>&lt;span class="gd">-main_tests.setBuildMode(mode);
&lt;/span>&lt;span class="gd">-main_tests.setTarget(target);
&lt;/span>&lt;span class="gd">&lt;/span>&lt;span class="gi">+const main_tests = b.addTest(.{
&lt;/span>&lt;span class="gi">+ .name = &amp;#34;glfw-tests&amp;#34;,
&lt;/span>&lt;span class="gi">+ .kind = .test_exe,
&lt;/span>&lt;span class="gi">+ .root_source_file = .{ .path = sdkPath(&amp;#34;/src/main.zig&amp;#34;) },
&lt;/span>&lt;span class="gi">+ .target = target,
&lt;/span>&lt;span class="gi">+ .optimize = optimize,
&lt;/span>&lt;span class="gi">+});
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Shared libraries:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="gd">-const lib = b.addSharedLibrary(&amp;#34;glfw&amp;#34;, null, .unversioned)
&lt;/span>&lt;span class="gd">-lib.setTarget(target);
&lt;/span>&lt;span class="gd">-lib.setBuildMode(mode);
&lt;/span>&lt;span class="gd">&lt;/span>&lt;span class="gi">+b.addSharedLibrary(.{ .name = &amp;#34;glfw&amp;#34;, .target = target, .optimize = optimize })
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="gd">-const lib = b.addSharedLibrary(&amp;#34;machcore&amp;#34;, &amp;#34;src/platform/libmachcore.zig&amp;#34;, .unversioned);
&lt;/span>&lt;span class="gd">-lib.setTarget(target);
&lt;/span>&lt;span class="gd">-lib.setBuildMode(mode);
&lt;/span>&lt;span class="gd">&lt;/span>&lt;span class="gi">+const lib = b.addSharedLibrary(.{
&lt;/span>&lt;span class="gi">+ .name = &amp;#34;machcore&amp;#34;,
&lt;/span>&lt;span class="gi">+ .root_source_file = &amp;#34;src/platform/libmachcore.zig&amp;#34;,
&lt;/span>&lt;span class="gi">+ .target = target,
&lt;/span>&lt;span class="gi">+ .optimize = optimize
&lt;/span>&lt;span class="gi">+});
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Static libraries:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="gd">-const lib = b.addStaticLibrary(&amp;#34;basisu-transcoder&amp;#34;, null);
&lt;/span>&lt;span class="gd">-lib.setTarget(target);
&lt;/span>&lt;span class="gd">-lib.setMode(mode);
&lt;/span>&lt;span class="gd">&lt;/span>&lt;span class="gi">+const lib = b.addStaticLibrary(.{
&lt;/span>&lt;span class="gi">+ .name = &amp;#34;basisu-transcoder&amp;#34;,
&lt;/span>&lt;span class="gi">+ .target = target,
&lt;/span>&lt;span class="gi">+ .optimize = optimize,
&lt;/span>&lt;span class="gi">+});
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;h2 id="renamings">Renamings&lt;/h2>
&lt;ul>
&lt;li>&lt;code>std.build.LibExeObjStep&lt;/code> has been renamed to just &lt;code>std.build.CompileStep&lt;/code> (beautiful!)&lt;/li>
&lt;li>&lt;code>*std.build.Builder&lt;/code> has been renamed to just &lt;code>*std.Build&lt;/code> (nice, this is used extensively everywhere!)&lt;/li>
&lt;/ul>
&lt;h2 id="modules">Modules&lt;/h2>
&lt;p>Units of code you &lt;code>@import(&amp;quot;foo&amp;quot;)&lt;/code> (previously known as &lt;em>packages&lt;/em>) are now known as &lt;em>modules&lt;/em>, and &lt;em>packages&lt;/em> now refers to a piece of code you download/depend on using the Zig package manager. &lt;em>Libraries&lt;/em> is reserved for referring to C-style libraries, &lt;code>.dll&lt;/code>s, etc.&lt;/p>
&lt;p>These units of code used to be declared as a &lt;code>std.build.Pkg&lt;/code> struct:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zig" data-lang="zig">&lt;span class="kr">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">const&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">my_pkg&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Pkg&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;earcut&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;src/main.zig&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And added as a dependency using e.g. &lt;code>exe.addPackage(my_pkg);&lt;/code>&lt;/p>
&lt;p>Now, these are called &lt;em>modules&lt;/em> and can be created in a few ways. One is using &lt;code>b.createModule&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zig" data-lang="zig">&lt;span class="kr">const&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">my_module&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">createModule&lt;/span>&lt;span class="p">(.{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">source_file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;src/main.zig&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dependencies&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;core&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">core&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;ecs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ecs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;sysaudio&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sysaudio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then depend on that module using e.g. &lt;code>exe.addModule(&amp;quot;earcut&amp;quot;, my_module);&lt;/code>&lt;/p>
&lt;p>Notably, modules are created at &lt;em>runtime&lt;/em> via the &lt;code>*std.Build&lt;/code> now - so you may have some reworking to do if you previously depended on &lt;code>std.build.Pkg&lt;/code> being a global constant you could rely on at comptime.&lt;/p>
&lt;p>Another option, which may be preferred, is via &lt;a href="https://github.com/ziglang/zig/blob/fc48467a97021cb872ff2a947f96e882274c39c1/lib/std/Build.zig#L547-L558">&lt;code>addModule&lt;/code>&lt;/a>. It will make the module available to other packages which depend on this package.&lt;/p>
&lt;p>You may also like to know that a &lt;em>pair of dependency name + the module&lt;/em> can be represented as &lt;a href="https://github.com/ziglang/zig/blob/fc48467a97021cb872ff2a947f96e882274c39c1/lib/std/Build.zig#L560-L563">&lt;code>std.Build.ModuleDependency&lt;/code>&lt;/a> now.&lt;/p>
&lt;p>We&amp;rsquo;ve just gone for an initial 1:1 translation in our code, but adoption of the package manager will likely mean structuring your code a bit differently than the above, and the package manager is still a work-in-progress.&lt;/p>
&lt;h2 id="thanks-for-reading">Thanks for reading&lt;/h2>
&lt;p>As we work towards Mach v0.2, we&amp;rsquo;re getting more serious about what &lt;em>stability&lt;/em> means for us. Our intent is to enable us to move quickly, while also helping you to update your code. We will be achieving this through articles like this which help you understand &amp;amp; update your code to the latest APIs. Hopefully this has helped you! You can find other &lt;em>zig: Tips&lt;/em> &lt;a href="https://devlog.hexops.com/categories/zigtips/">here&lt;/a>.&lt;/p>
&lt;p>&lt;img align="left" style="max-height: 150px;" src="https://user-images.githubusercontent.com/3173176/187348488-0b52e87d-3a48-421c-9402-be78e32b5a20.png">&lt;/img>
Be sure to join the &lt;a href="https://discord.gg/XNG3NZgCqp">Mach engine Discord&lt;/a> where we&amp;rsquo;re building the future of Zig game development.
&lt;br>&lt;br>
You can also &lt;a href="https://github.com/sponsors/slimsag">sponsor my work&lt;/a> if you like what I&amp;rsquo;m doing! :)&lt;/p></description></item></channel></rss>